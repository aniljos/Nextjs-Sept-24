

Project structure

package.json
	The npm configuration file: dependencies, scripts
node_modules
	All dependecies are installed here
tsconfig.json
	Typescript compiler configuration.
next.config.mjs
	Next.js configuration file.
eslintrc.json	
	Linting
src folder(optional)
	source code
app folder
	file based routes
	
	layout.tsx
		This defines the layout of the Application
		This id root component(first component) to be rendered
	page.tsx
		The base route: (http://localhost:3000/)
		
		
The Next.js project enables a strict mode(React.StrictMode), this analyse the project for errors or bugs. Acts on in the dev mode.


.js ==> javascript
.jsx ==> javascript with jsx

.ts => typescript
.tsx = typescript + jsx



HTML
	<button onclick="foo(p1)">Click Me</button>
	
React
	<button onClick={foo}>Click Me</button>
	
***Re-rendering a component
	1. props change
	2. state changes
	
setState 
	1. Async 
	2. State updates are batched => React 18 onwards
	3. setState => 2 overloads => setState(updatedValue), setState(callback)
	
	
	
	
	ctr = 5
 setCtr(ctr + 1);   => setCtr(6)
 setCtr(ctr + 1);   => setCtr(6)
 
 setCtr(prevCtr => prevCtr + 1); => setCtr(call in fn)
 setCtr(prevCtr => prevCtr + 1); => setCtr(call in fn)
 
 
 Expression {} => this cannot have statements only expression
 
 conditional rendering=> ternary operator
 
 useEffect(callback, [dependecies])
	1. if the dependecy array is empty, then the callback is invoked when the component is mounted.
	2. Mounted use-cases: API calls, DOM initialization, Timer method
	3. In the callback invoked when the component is mounted, we can return a callback. This callback is invoked when the component unmounted.
	4. Unmount: Cancel API calls, unregister any event, clear any timer methods
	
	
<Counter intialValue={5}>
	<p>Hello</p>
</Counter>

<RootLayout>

	Home/About/Login
	
</RootLayout>

/    => Home
/about  => About
/login => Login

Web Application: HTML, CSS, JavaScript

UI/UX team => Figma 


Forms
 controlled input : useState hook, binding the control to a state
 uncontrolled  input : useRef hook, similar document.getElementById()
 
 
 Async 
	Promise: resolved, rejected
	ES6/7: async and await: handle a promise with async and await
			Write async code in a sync like code
			
			
			
const response = await axios.post(url, {name, password});
const response = await axios.post(url, {name, password});
const response = await axios.post(url, {name, password});

const p1 =  axios.post(url, {name, password});
const p2 =  axios.post(url, {name, password});
const p3 =  axios.post(url, {name, password});

await  Promise.all(p1, p2, p3)


<div class=""

<div style="color: blue"

state: 
	should always be considered(treat) as immutable
	create a copy of the state, change the copy and assign it.
	
	
http://localhost:3001/products/2 ==> 2 is path parameter
http://localhost:3001/products/2/abc
http://localhost:3001/products?id=2&data=abc ==> 2 is path parameter
http://localhost:3001/products?id=2 id is search parameter



Complete the Edit Product page

1. All the inputfield values should be populated
2. GET http://localhost:9000/products/{id}
3. PUT http://localhost:9000/products/{id} to save(update)
4. on cancel and save => go back to the prev page


React 

1. APi calls( axios, fetch)
2. Navigation (Next.js), Create react App, Vite => React-router-dom



<form method="POST" action="http://loalhost:9000/saveForm">


	<input name="productName"/>
	....
	<button></button>

</form>


POST http://loalhost:9000/saveForm productName=IPhone;price=56000

GET http://localhost:3001/products/1


Flow: handle the click event,  Send a request 


Component Development

Next.js Component: Define Pages, Reusebale components

Optimization & Design
     Keep the components granular(small)
	 
	 React.memo: HOC, which creates a memoized copy of the component. The memoized copy is invalidated when the props or state of that
				component changes
	useCallback: memoized copy of a callback
	useMemo: memoized copy of a value



	Reusebale Component are similar to HTML element
				<input type="text" placeholder="Enter the ID" onChange="foo()" onBlur="bar()"/>
				<ProductView product={product} onDelete={handleDelete} onEdit={handleEdit}/>
				
				
For a reference to a functional componenet, then we need to wrap that component with React.forwardRef
What should reference point to? we have to define the instance that ref point to, useImeperativeHandle

Reuse Code(component development)
	Custom Hooks - functional
	Higher Order Components(HOC) - class, funtional
	
	Custom Hooks: reuseability
		Reuse hooks
	
	
Redux
 Action is an object: type(mandatory): operation & payload(or any name/optional): data
	- {type:"Ã¼pdate_the_product", payload: {id: 5, name: "abc"} }
	- {type:"delete_the_product", id: 5}
    - {type:"removeAll"} 
 Store: central store, one per app
Reducer: functions that process the actions updates the store	
		  multiple reducers
		  
		  























	
	
	




















